package certificate

import (
	"crypto/x509"
	"encoding/pem"
	"github.com/stretchr/testify/assert"
	"github.com/trustbloc/vc-go/verifiable"
	"jades/logging"
	"testing"
)

type Emp struct{}

func TestVerifyVC(t *testing.T) {
	type test struct {
		testName           string
		credentialToVerify verifiable.Credential
		expectedResult     bool
	}

	//vcc := verifiable.CredentialContents{}
	//customFields := verifiable.CustomFields{}
	//var proofs []verifiable.Proof
	//vc, err := verifiable.CreateCredentialWithProofs(vcc, customFields, proofs)

	tests := []test{
		{testName: "DemoTest", credentialToVerify: getLEARCredential(), expectedResult: true},
	}

	for _, tc := range tests {
		t.Run(tc.testName, func(t *testing.T) {
			logging.Log().Info("TestVerifyVC +++++++++++++++++ Running test: ", tc.testName)
		})
	}
}

func TestCertQualification(t *testing.T) {
	//sigCertEncoded := "MIID1DCCArygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMTcxMTI0MTQ0MzI3WhcNMTkwOTI0MTM0MzI3WjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMt/h9F4KnfbQBEtyIuNg6I9ZPZVN6SqW4smRTKpRcepvB7bL8NnB7dIOzL2bvyS72CqgltWHP5CvFKBRNnooJW6LuGR8DWq/dM5B0khuB15dGcUURkKUzpb4TwpBWuCBriKKtpo3EL6ZRFPeP2w4SsYxYxLT2ZAxKGSM8FOE5oHJzRS8WgYFzOUzqmtAY1o55UqBSqN+6MN3mX7eleHN9VezhixBkhVg+UbEzaO+TCuxzEaOH0Aqmhd9iGdkLsf/Nr/y1hKQw3DI7bnqjykddZqrfgozqXd6FMp9IlNwJ8HdDMy7CeE5DZt5xqmhRHVWOR5XLjCkTZKfLyh+tV4t1ECAwEAAaOBvDCBuTAOBgNVHQ8BAf8EBAMCBkAwgYcGCCsGAQUFBwEBBHsweTA5BggrBgEFBQcwAYYtaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3Rvcnkvb2NzcC9nb29kLWNhMDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvZ29vZC1jYS5jcnQwHQYDVR0OBBYEFC1SwN01X0kcZMmYWF94KUt4e5onMA0GCSqGSIb3DQEBCwUAA4IBAQAsxKL8q6B7OS154tz4AHXYTLQE+/vsLG9oAaqPfi8oYrHOTic3UDKyQT1qzNMrSHCvVFu2FM3x4+EB6qsYjU9u7FZXo0Iw39Om8247Q8AoRlv/NJGXrtzgfw1KoXUdBBGR4Bq05nRN0stfUqg+y41InPbBz7fanhvjStS+rPXiQOMS518LBay3VjjaootiWKQxB5o9pmybjIJMPbB/vwB5U+piWIh8QybAB1cNpqhaZBnwnNye+3/ap4efvy83bPh/aqvZVOQ0qmeZBTIw30HFKgzdp6ieoi9o7zA/yfs8wA522PI2feAMIHwq727Oq3Jx4q5tN1pzR6ZFOwzm/iIh"
	sigCertEncoded := "MIIHAjCCBOqgAwIBAgIUHpnHXOOnsXAsqYN+gsKozw61R1swDQYJKoZIhvcNAQEL\nBQAwZDELMAkGA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjESMBAGA1UECgwJRklX\nQVJFIENBMRIwEAYDVQQDDAlGSVdBUkUtQ0ExHDAaBgkqhkiG9w0BCQEWDWNhQGZp\nd2FyZS5vcmcwHhcNMjQwNDExMTM1NzE5WhcNMjkwNDEwMTM1NzE5WjCBpjELMAkG\nA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGluMRowGAYD\nVQQKDBFGSVdBUkUgRm91bmRhdGlvbjEUMBIGA1UEAwwLRklXQVJFLVRlc3QxHjAc\nBgkqhkiG9w0BCQEWD3Rlc3RAZml3YXJlLm9yZzELMAkGA1UEBRMCMDMxFjAUBgNV\nBGEMDVZBVERFXzEyMzQ1NjcwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC\nAQCTjT1kl+uZQJg8uyL3pMARtHWy06/g7RiOICeeug+V94jRT8mTap005TXbVmWO\nG96oVrtGkjBUq4hbL6GgMMe1S+OwR5R6TW+JDW7VgrsFvtqLjOY/RaAL9+unQz/K\nw4jNdWwzpuawXIU8dCOKmLBMx3rco9zKzanXa9fn0ZqMCvTqTbFUz/yQeQ1UsmvG\niFUeVH54DiS3pOR9SBcZpKG0tju9/EFg0gRjQLipbcBdvt/llDg9H9kFUtfZvsr9\nhR8MkPPim4jGUxuwUldBIF+RuDM+PLwUmFtqTh97/SrKE9SbbeLuMmCWgqS8BoAi\n0e0THMUmuDdNSNpn7rP7Qllefb0SvRRW6Z8dHGjtF/RSjt+ZOV7Z2ETHEXM5HC7u\nNIBwtWAea0shLWYqF0wAFtKMql761+t1/8qwTAjBaXqK5RaiP0rV3OLWVoSblf9i\nfQebmg5Us0aVz/mcfCU7FyTvNLZdwpKjojsCoxCLyXPU+cgaBj5qs6mGj+4R5rp4\nU1iAOAiofcTiXs+zAK2CB0Drhf4JPW33kucd4nzLoOAxjDU/a9/j96rVqf7KcdEx\nT6O6jnIDBh7YoGKzz435d315p4EzoERaWE1u9QIaCleQovS7GDmNqUJWQQXmQas0\nFHq82BsHdnGTkdT1tk28P4JnwLy1jUVkVTu3/aoncxzd2wIDAQABo4IBZzCCAWMw\ngZ4GCCsGAQUFBwEDBIGRMIGOMAgGBgQAjkYBATA4BgYEAI5GAQUwLjAsFiFodHRw\nczovL2V4YW1wbGUub3JnL3BraWRpc2Nsb3N1cmUTB2V4YW1wbGUwIQYGBACBmCcC\nMBcMDFNvbWUgdGVzdCBDQQwHWFgtREZTQTAlBgYEAI5GAQYwGwYHBACORgEGAQYH\nBACORgEGAgYHBACORgEGAzAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIFoDAz\nBglghkgBhvhCAQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgQ2xpZW50IENlcnRpZmlj\nYXRlMB0GA1UdDgQWBBSuN2L1E+p8duOcL/vDqDdg8pSVwzAfBgNVHSMEGDAWgBR9\nCIN+xXKFUN5ujpI9wZK1nE9rrzAOBgNVHQ8BAf8EBAMCBeAwHQYDVR0lBBYwFAYI\nKwYBBQUHAwIGCCsGAQUFBwMEMA0GCSqGSIb3DQEBCwUAA4ICAQBhLKvvsIjjH4WC\n7eCEY1+nsCLiTvFhNb5zX2DR8/daluod+KDOxIdgdIQLqwItRTYUejMCkMB8hzZk\ng+audMm+nsrAE08qTjj4ovR2oROdlgvz6Nyqwnk3g+GOdPoE38TeU19SvxoR+WHN\n0UY+rXdsYVfzKm3H+JXBppX731V8D+WOgjeMzT1qj9+6iEcjNhMr/DXotTFwLIFx\nd7OY6nFQye/bwscF59abLU9SqVPf/WTS6GAiP2i2rE7PMJ+dpN925OvJGsMpVfJS\nDr8vcN5QolSt7sEwUZrOtyzsf7Iu/MoCCtJXAmi/1zOeHxKGBJwOFM5GH3ZUhmh0\n6hu/ujQM4ntFNUvjNiRFZGJTuWaIIPcr1iqx0Tvf9l2OIHzGldWGXnd1VTLICHOw\nNRO01hqKrfzytuBtTnF6AcJbenXpmcFrflC2v+seUFHaBbLwyIxmOhVCQSYqH15C\nAC/0fMK6TCBesvJE3zHZE5oVYLYwkdb9VkP1feitet9AA2SttQN0EhtC1lRv4LVW\nK7kMeNhd6VpEp1zKOEgKGIZgYfnWaTj+cKmcmHWOxSHRF30PmPfRlEFXefhb4/jQ\n48hLT9mgqyaIuuxgB0Cv03/th9oiv+RGr6poDONK0U13B4mDTdflqp54ZbQGcrJx\nb8FKq7J3+LlEX0KjOjTavxMxNW4F1Q=="

	sigCert, err := LoadCertificate2(sigCertEncoded)
	if err != nil {
		logging.Log().Error("cert read failed")
		return
	}

	assert.True(t, sigCert.IsQualified())
}

func getLEARCredential() verifiable.Credential {
	return verifiable.Credential{}
}

func TestBase64(t *testing.T) {
	//sigCert := "MIIC9TCCAd2gAwIBAgIBAjANBgkqhkiG9w0BAQUFADArMQswCQYDVQQGEwJBQTEMMAoGA1UEChMDRFNTMQ4wDAYDVQQDEwVJQ0EgQTAeFw0xMzEyMDIxNzMzMTBaFw0xNTEyMDIxNzMzMTBaMDAxCzAJBgNVBAYTAkFBMQwwCgYDVQQKEwNEU1MxEzARBgNVBAMTCnVzZXIgQSBSU0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJUHHAphmSDdQ1t62tppK+dLTANsE2nAj+HCpasS3ohlBsrhteRsvTAbrDyIzCmTYWu/nVI4TGvbzBESwV/QitlkoMLpYFw32MIBf2DLmECzGJ3vm5haw6u8S9quR1h8Vu7QWd+5KMabZuR+j91RiSuoY0xS2ZQxJw1vhvW9hRYjAgMBAAGjgaIwgZ8wCQYDVR0TBAIwADAdBgNVHQ4EFgQU9ESnTWfwg13c3LQZzqqwibY5WVYwUwYDVR0jBEwwSoAUIO1CDsBSUcEoFZxKaWf1PAL1U+uhL6QtMCsxDDAKBgNVBAoTA0RTUzELMAkGA1UEBhMCQUExDjAMBgNVBAMTBVJDQSBBggEBMAsGA1UdDwQEAwIHgDARBgNVHSAECjAIMAYGBFUdIAAwDQYJKoZIhvcNAQEFBQADggEBAGnhhnoyVUhDnr/BSbZ/uWfSuwzFPG+2V9K6WxdIaaXOORFGIdFwGlAwA/Qzpq9snfBxuTkAykxq0uEDhHTj0qXxWRjQ+Dop/DrmccoF/zDvgGusyY1YXaABd/kc3IYt7ns7z3tpiqIz4A7a/UHplBRXfqjyaZurZuJQRaSdxh6CNhdEUiUBxkbb1SdMjuOgjzSDjcDjcegjvDquMKdDetvtu2Qh4ConBBo3fUImwiFRWnbudS5H2HE18ikC7gY/QIuNr7USf1PNyUgcG2g31cMtemj7UTBHZ2V/jPf7ZXqwfnVSaYkNvM3weAI6R3PI0STjdxN6a9qjt9xld40YEdw="
	sigCertEncoded := "MIID1DCCArygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMTcxMTI0MTQ0MzI3WhcNMTkwOTI0MTM0MzI3WjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMt/h9F4KnfbQBEtyIuNg6I9ZPZVN6SqW4smRTKpRcepvB7bL8NnB7dIOzL2bvyS72CqgltWHP5CvFKBRNnooJW6LuGR8DWq/dM5B0khuB15dGcUURkKUzpb4TwpBWuCBriKKtpo3EL6ZRFPeP2w4SsYxYxLT2ZAxKGSM8FOE5oHJzRS8WgYFzOUzqmtAY1o55UqBSqN+6MN3mX7eleHN9VezhixBkhVg+UbEzaO+TCuxzEaOH0Aqmhd9iGdkLsf/Nr/y1hKQw3DI7bnqjykddZqrfgozqXd6FMp9IlNwJ8HdDMy7CeE5DZt5xqmhRHVWOR5XLjCkTZKfLyh+tV4t1ECAwEAAaOBvDCBuTAOBgNVHQ8BAf8EBAMCBkAwgYcGCCsGAQUFBwEBBHsweTA5BggrBgEFBQcwAYYtaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3Rvcnkvb2NzcC9nb29kLWNhMDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvZ29vZC1jYS5jcnQwHQYDVR0OBBYEFC1SwN01X0kcZMmYWF94KUt4e5onMA0GCSqGSIb3DQEBCwUAA4IBAQAsxKL8q6B7OS154tz4AHXYTLQE+/vsLG9oAaqPfi8oYrHOTic3UDKyQT1qzNMrSHCvVFu2FM3x4+EB6qsYjU9u7FZXo0Iw39Om8247Q8AoRlv/NJGXrtzgfw1KoXUdBBGR4Bq05nRN0stfUqg+y41InPbBz7fanhvjStS+rPXiQOMS518LBay3VjjaootiWKQxB5o9pmybjIJMPbB/vwB5U+piWIh8QybAB1cNpqhaZBnwnNye+3/ap4efvy83bPh/aqvZVOQ0qmeZBTIw30HFKgzdp6ieoi9o7zA/yfs8wA522PI2feAMIHwq727Oq3Jx4q5tN1pzR6ZFOwzm/iIh"
	caTokenEncoded := "MIID6jCCAtKgAwIBAgIBBDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMTcxMTI0MTQ0MzI0WhcNMTkwOTI0MTM0MzI0WjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDE0JtjEg9q26lR5tJnvPLkgtWaMrRkeDfABta1qI3XLC2+AwLketU1lPuwK5HopmHkSTpXFE/cWfGmbgsHSkYlfcsXD6CKtYtinjzeekMQE7xiPWM5b9QtyGoh6BZUyydw934LnNjJNHfMgQVtyVnQ8L6SwFhyT3BTWU9SzVCNSlyUSJCAEsNQrFP1mxiHsdXJlUUykqxhaLC0gGZhIyhTZB3qNaRSIcGr4IlXTCXUkB8oaWNqwe/sS1+JlkiGdGED3NR9Zh4SBAk65wfL1xjzN+JgDrTTbPoKJOlqeTrv3NMsW9rzG/Fx4AlJgA7Lo+ujrHwggyC9zg3pRRQaH+LpAgMBAAGjgdQwgdEwDgYDVR0PAQH/BAQDAgeAMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NybC9yb290LWNhLmNybDBMBggrBgEFBQcBAQRAMD4wPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9yb290LWNhLmNydDAdBgNVHQ4EFgQUYEoTfXrajcuuURqGnbZIZlxBRQ0wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAMEZzOXyFl4FEUrOXIaI2ha74zIbGsmtKdk2p801cYh4vrsldN8hbXUu7sbWTJ9BP6HdFJ+89fP+OUbyHm1NwFYf+BN11+NFKQoDniheezha9ZO8m0aKSTQvt/J3SHr/Ui7F00cDZhPa4SNHWdtl2capxYUY0o7ww/WpI+z5bIUauwiimBEqK2Dr2jwxbztM0qlDjKgHpCtriW48e5NmT9IBnJhMqqlLJpt9/AwepRMakcz65/wu40YcPd42TINMWwcIAWAZLPxdemIuwMrCQnGKZSmi1GkCWuMOwFcHXk7Yb2xku6PQPvcLWqSRMjD0RzVy8G2kK52VMwwwjoDi+Gg=="
	rootTokenEncoded := "MIIDVzCCAj+gAwIBAgIBATANBgkqhkiG9w0BAQ0FADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMTcxMDI0MTM0MzIzWhcNMTkxMDI0MTM0MzIzWjBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCcPx2j0OcAL0qmQ99apDybqwXCMvzwTDzNU7RkDYvGRQVTaqthrp7abnJnOzgjeCsu4N/9GgwXn8ICQTYEq00QVD6fabZT4ophtPbuIPF0CCL8FIXkpK2p6qpBNeHNxvgpQegMXMNUVqcYyp1v39/zyYI+iimBLhSTzO9QP54i32Katfn7ophaaYnsc02TJ0s9aBGRxekzyliUimWekr/KSY9fIHLEU09lgmdYhk1P+OAcuGQHrNYnOE2Jyl9NLN+3gtBuzTSxwJEvQIvTGAWIz+qCnCugMH6eHOs3CkbWlRSEy1qIgidqsNYm0yP6BO2hJdim9r0A3z8O9HSe4KFlAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUw91nslwAwQ7I31tDQp2YOrBeFxowDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQ0FAAOCAQEAO4PsY/jm4VkJKDA19mlpy2/qRaAj5n3MlgX2/8UaVRm4+5HUZ1zOrXM9Dl4gofS1eYvAD2HeBnHrY+6mfwBcH+NF54YDRjRibXp48FOn91HjnkMNjYB5o16tl8y0frI+eWJbq+GgLLvlruWShXCSQuWgDbY5jXcHV+TQskSQOcOy1hh82jdH2ysEtd4KcO/E2OGDUy+M7ZffBnLxPjxZRm198eyeC/gcVjBZoqHykwkivkYazbWhWvMkV95htR6x7dL2fp2sr9s12Gbq8Y9PfpXfXJ06qCQtojJiml4rF3YWWPVOUK6Gy1DFAvlU2iOASiV4sVwLkp1WAIFwKSChHQ=="

	sigCert, err := LoadCertificate2(sigCertEncoded)
	if err != nil {
		logging.Log().Error("cert read failed")
		return
	}

	caToken, err := LoadCertificate2(caTokenEncoded)
	if err != nil {
		logging.Log().Error("cert read failed2")
		return
	}

	rootToken, err := LoadCertificate2(rootTokenEncoded)
	if err != nil {
		logging.Log().Error("cert read failed3")
		return
	}

	assert.NoError(t, sigCert.IsSignedBy(caToken.PublicKey()))
	assert.NoError(t, caToken.IsSignedBy(rootToken.PublicKey()))
	//assert.NoError(t, rootToken.IsSignedBy(rootToken.PublicKey()))   // SignatureAlgorithm SHA512
}

const additionalGeneralSubtreePEM = `
-----BEGIN CERTIFICATE-----
MIIG4TCCBMmgAwIBAgIRALss+4rLw2Ia7tFFhxE8g5cwDQYJKoZIhvcNAQELBQAw
bjELMAkGA1UEBhMCTkwxIDAeBgNVBAoMF01pbmlzdGVyaWUgdmFuIERlZmVuc2ll
MT0wOwYDVQQDDDRNaW5pc3RlcmllIHZhbiBEZWZlbnNpZSBDZXJ0aWZpY2F0aWUg
QXV0b3JpdGVpdCAtIEcyMB4XDTEzMDMwNjEyMDM0OVoXDTEzMTEzMDEyMDM1MFow
bDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUNlcnRpUGF0aCBMTEMxIjAgBgNVBAsT
GUNlcnRpZmljYXRpb24gQXV0aG9yaXRpZXMxITAfBgNVBAMTGENlcnRpUGF0aCBC
cmlkZ2UgQ0EgLSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANLW
4kXiRqvwBhJfN9uz12FA+P2D34MPxOt7TGXljm2plJ2CLzvaH8/ymsMdSWdJBS1M
8FmwvNL1w3A6ZuzksJjPikAu8kY3dcp3mrkk9eCPORDAwGtfsXwZysLiuEaDWpbD
dHOaHnI6qWU0N6OI+hNX58EjDpIGC1WQdho1tHOTPc5Hf5/hOpM/29v/wr7kySjs
Z+7nsvkm5rNhuJNzPsLsgzVaJ5/BVyOplZy24FKM8Y43MjR4osZm+a2e0zniqw6/
rvcjcGYabYaznZfQG1GXoyf2Vea+CCgpgUhlVafgkwEs8izl8rIpvBzXiFAgFQuG
Ituoy92PJbDs430fA/cCAwEAAaOCAnowggJ2MEUGCCsGAQUFBwEBBDkwNzA1Bggr
BgEFBQcwAoYpaHR0cDovL2NlcnRzLmNhLm1pbmRlZi5ubC9taW5kZWYtY2EtMi5w
N2MwHwYDVR0jBBgwFoAUzln9WSPz2M64Rl2HYf2/KD8StmQwDwYDVR0TAQH/BAUw
AwEB/zCB6QYDVR0gBIHhMIHeMEgGCmCEEAGHawECBQEwOjA4BggrBgEFBQcCARYs
aHR0cDovL2Nwcy5kcC5jYS5taW5kZWYubmwvbWluZGVmLWNhLWRwLWNwcy8wSAYK
YIQQAYdrAQIFAjA6MDgGCCsGAQUFBwIBFixodHRwOi8vY3BzLmRwLmNhLm1pbmRl
Zi5ubC9taW5kZWYtY2EtZHAtY3BzLzBIBgpghBABh2sBAgUDMDowOAYIKwYBBQUH
AgEWLGh0dHA6Ly9jcHMuZHAuY2EubWluZGVmLm5sL21pbmRlZi1jYS1kcC1jcHMv
MDkGA1UdHwQyMDAwLqAsoCqGKGh0dHA6Ly9jcmxzLmNhLm1pbmRlZi5ubC9taW5k
ZWYtY2EtMi5jcmwwDgYDVR0PAQH/BAQDAgEGMEYGA1UdHgEB/wQ8MDqhODA2pDEw
LzELMAkGA1UEBhMCTkwxIDAeBgNVBAoTF01pbmlzdGVyaWUgdmFuIERlZmVuc2ll
gQFjMF0GA1UdIQRWMFQwGgYKYIQQAYdrAQIFAQYMKwYBBAGBu1MBAQECMBoGCmCE
EAGHawECBQIGDCsGAQQBgbtTAQEBAjAaBgpghBABh2sBAgUDBgwrBgEEAYG7UwEB
AQIwHQYDVR0OBBYEFNDCjBM3M3ZKkag84ei3/aKc0d0UMA0GCSqGSIb3DQEBCwUA
A4ICAQAQXFn9jF90/DNFf15JhoGtta/0dNInb14PMu3PAjcdrXYCDPpQZOArTUng
5YT1WuzfmjnXiTsziT3my0r9Mxvz/btKK/lnVOMW4c2q/8sIsIPnnW5ZaRGrsANB
dNDZkzMYmeG2Pfgvd0AQSOrpE/TVgWfu/+MMRWwX9y6VbooBR7BLv7zMuVH0WqLn
6OMFth7fqsThlfMSzkE/RDSaU6n3wXAWT1SIqBITtccRjSUQUFm/q3xrb2cwcZA6
8vdS4hzNd+ttS905ay31Ks4/1Wrm1bH5RhEfRSH0VSXnc0b+z+RyBbmiwtVZqzxE
u3UQg/rAmtLDclLFEzjp8YDTIRYSLwstDbEXO/0ArdGrQm79HQ8i/3ZbP2357myW
i15qd6gMJIgGHS4b8Hc7R1K8LQ9Gm1aLKBEWVNGZlPK/cpXThpVmoEyslN2DHCrc
fbMbjNZpXlTMa+/b9z7Fa4X8dY8u/ELzZuJXJv5Rmqtg29eopFFYDCl0Nkh1XAjo
QejEoHHUvYV8TThHZr6Z6Ib8CECgTehU4QvepkgDXNoNrKRZBG0JhLjkwxh2whZq
nvWBfALC2VuNOM6C0rDY+HmhMlVt0XeqnybD9MuQALMit7Z00Cw2CIjNsBI9xBqD
xKK9CjUb7gzRUWSpB9jGHsvpEMHOzIFhufvH2Bz1XJw+Cl7khw==
-----END CERTIFICATE-----`

func TestAdditionFieldsInGeneralSubtree(t *testing.T) {
	// Very rarely, certificates can include additional fields in the
	// GeneralSubtree structure. This tests that such certificates can be
	// parsed.
	block, _ := pem.Decode([]byte(additionalGeneralSubtreePEM))
	certificate, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatalf("failed to parse certificate: %s", err)
	}
	println(certificate)
}

const rootPEM = `
-----BEGIN CERTIFICATE-----
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
2A==
-----END CERTIFICATE-----`

const intermediatePEM = `
-----BEGIN CERTIFICATE-----
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
6ZzAGU9UDHhf7qcnnZ4NmVA=
-----END CERTIFICATE-----`

const serverPEM = `
-----BEGIN CERTIFICATE-----
MIIF4jCCA8qgAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAkdC
MRAwDgYDVQQIDAdFbmdsYW5kMRIwEAYDVQQKDAlBbGljZSBMdGQxKDAmBgNVBAsM
H0FsaWNlIEx0ZCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIjAgBgNVBAMMGUFsaWNl
IEx0ZCBJbnRlcm1lZGlhdGUgQ0EwHhcNMjQwNTEzMTQwNTE4WhcNMjUwNTIzMTQw
NTE4WjCBhjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNV
BAcMDU1vdW50YWluIFZpZXcxEjAQBgNVBAoMCUFsaWNlIEx0ZDEfMB0GA1UECwwW
QWxpY2UgTHRkIFdlYiBTZXJ2aWNlczEVMBMGA1UEAwwMd3d3LmJla2EuY29tMIIB
IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5RGMwu3Stblq4KCulaygtLab
egNtJRe1qqBdgZ6ox7fewweI/fug9uAGx2qHsQC6kxmXVj0+MdBSJM2v6vhAwAar
MftA/OVGm99Z6MviqZHDp/7CGjlgxm6Pn/XxA+AMcja9/t1eHjLcMjpyFVUBV6a0
LuujSNYBonPf1vIH0AwBVezT6UyyX5XhtkKeXfOSEQ4c2kYysFyfLaRunt5dCN6V
DYNcYDddGqfowSAD+QgW+k159/jH80G5yQRDNRFXF2FRzma7tcSECXqLAgsh93fh
FZ3F0qJ0W5/5Ob/d1Thb8vg+DvGMt8eSwGrjHKPii9ICIiy3YEXrYjDw65r/pQID
AQABo4IBWzCCAVcwCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZI
AYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAd
BgNVHQ4EFgQUN/0q9QNTLS7lAp3ZPc9lZjDze3UwgaQGA1UdIwSBnDCBmYAUfinh
Vk5WTGyqhvUdy0/+NJsJvPuhfaR7MHkxCzAJBgNVBAYTAkdCMRAwDgYDVQQIDAdF
bmdsYW5kMRIwEAYDVQQKDAlBbGljZSBMdGQxKDAmBgNVBAsMH0FsaWNlIEx0ZCBD
ZXJ0aWZpY2F0ZSBBdXRob3JpdHkxGjAYBgNVBAMMEUFsaWNlIEx0ZCBSb290IENB
ggIQADAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwFwYDVR0R
BBAwDoIMd3d3LmJla2EuY29tMA0GCSqGSIb3DQEBCwUAA4ICAQB+rpb8XUyRWexQ
4MBEs/unw3t9k00FKqxNxs3TLkS+sbSc4MXU40jyW6DP+gRSDQeRPmsEhelKSVqG
yeU73QwVXT5T+qRVlaj4aeVnFDijYzovy/8cGwF+S0IvSRNkZCoPTjAieQdZKUBe
/amRm2jxHP2bzoQ8BlYVuaWlZvI1VQ2PbN6zRwYhyolpMtMheDmf64FbWcxtyydE
0omOJzpg6FJrzyfyA2Y47OdnzcxU+yycTAlQr5yLoWRSXFM4Cz4969wfcyAUmrX2
M/B1P8tDrAgB3//dS0QR0okF04fl28OX22KYwmrkgsyaLW82A5CHick6w4L85QBs
6TIrhJ0LOKe80bPl8C+9+6vBGVTnY+bz/wCF1AV0qevWZBij95HhrAHLzmdOE29x
KbWIBjeblHhrVFT3h9m0izY4XkFq3DNZlJ6eoL4/Rd9En4bZ9WeGDBTJZdp+DKyA
D7UJ5TqCvZTT/1rpNKoudLNl6sG/2jK6s02H6SmY7Ev9lMsvUK/dvdYH/ir1kry8
cqE5zagdGWJP44pqQoylZKl+Ji8kZVJYxal4Ab8vYSrRIe/cwZB8bUpFFDzM26Z5
E9TXItrMpZdT43huFYpexSiKqfRIrc7cTZrUBSafF8zdDGt3pVzSmUOUQYwMTMl9
JGYpo+A3Ah3/Djk5WJLAXlqNeVA4DQ==
-----END CERTIFICATE-----`

const server2PEM = `
-----BEGIN CERTIFICATE-----
MIIF4jCCA8qgAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwgYExCzAJBgNVBAYTAkdC
MRAwDgYDVQQIDAdFbmdsYW5kMRIwEAYDVQQKDAlBbGljZSBMdGQxKDAmBgNVBAsM
H0FsaWNlIEx0ZCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIjAgBgNVBAMMGUFsaWNl
IEx0ZCBJbnRlcm1lZGlhdGUgQ0EwHhcNMjQwNTEzMTQyOTI4WhcNMjUwNTIzMTQy
OTI4WjCBhjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNV
BAcMDU1vdW50YWluIFZpZXcxEjAQBgNVBAoMCUFsaWNlIEx0ZDEfMB0GA1UECwwW
QWxpY2UgTHRkIFdlYiBTZXJ2aWNlczEVMBMGA1UEAwwMd3d3LnRlc3QuY29tMIIB
IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5RGMwu3Stblq4KCulaygtLab
egNtJRe1qqBdgZ6ox7fewweI/fug9uAGx2qHsQC6kxmXVj0+MdBSJM2v6vhAwAar
MftA/OVGm99Z6MviqZHDp/7CGjlgxm6Pn/XxA+AMcja9/t1eHjLcMjpyFVUBV6a0
LuujSNYBonPf1vIH0AwBVezT6UyyX5XhtkKeXfOSEQ4c2kYysFyfLaRunt5dCN6V
DYNcYDddGqfowSAD+QgW+k159/jH80G5yQRDNRFXF2FRzma7tcSECXqLAgsh93fh
FZ3F0qJ0W5/5Ob/d1Thb8vg+DvGMt8eSwGrjHKPii9ICIiy3YEXrYjDw65r/pQID
AQABo4IBWzCCAVcwCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZI
AYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAd
BgNVHQ4EFgQUN/0q9QNTLS7lAp3ZPc9lZjDze3UwgaQGA1UdIwSBnDCBmYAUfinh
Vk5WTGyqhvUdy0/+NJsJvPuhfaR7MHkxCzAJBgNVBAYTAkdCMRAwDgYDVQQIDAdF
bmdsYW5kMRIwEAYDVQQKDAlBbGljZSBMdGQxKDAmBgNVBAsMH0FsaWNlIEx0ZCBD
ZXJ0aWZpY2F0ZSBBdXRob3JpdHkxGjAYBgNVBAMMEUFsaWNlIEx0ZCBSb290IENB
ggIQADAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwFwYDVR0R
BBAwDoIMd3d3LnRlc3QuY29tMA0GCSqGSIb3DQEBCwUAA4ICAQCewkJZir15KH56
liQoFsnCPIJOagOWV5uBwMSwUthS6aLhAOmrDEEVCYlTi+vLdBKrAlskXBP94Jyj
vOKoMNEo8U9/Yz6QebEks69bz9TVK+qF3bstHeEn2rCDsl4NPrU4l61HJeCJitMF
QyplLxHGcfGxA4MA3MrKFR9z0hF0iYH5wP6uioYZstSsGJ/wJJOQOaeQaq/0MItV
7+msNRDF6xDSEQclIygiagA9sTk9nRxCEX5O8UYOl+LplgbBptdqGWTeHUMNQIO4
j9YmMSTtke+3Ac6G23k/Hbslv4j1EtN3NR/zWXN2hFeEwS5xXF7uj2G3UceCeFy0
x4z2qyOgXC9oukrIppkDK//kv4o7o2AaeWHXmltAlloYCdNvLr+TR9+7v7jOWiTK
x/A4hk/ds5FZqocM2+RKsytygIltBc3DlMcxPx5tCZ13/4PoontK6YePsk5CH6Z0
RIhXMw0QySyDLRJ4QuS4drgd+zYjG3qMN/kILtLLJ2zRhzp8p7AFPGQs1iUYCx2L
52+Vlld45QxJxdLBTyVJG4AzhRn1141lLntBAgGwUOj7bUv+PN2yutKw04Oozm1M
ULDXMCldV/LUFpegrQTJmduTzWYBxAhxIMT3dD+dogpKAbkw1wGKlcqH5h/+udbl
XNuYmI8M/XJ1ZgRVXdQQ4/mn3o790g==
-----END CERTIFICATE-----`

func TestDemo1(t *testing.T) {
	serverCrtDecoded, _ := pem.Decode([]byte(serverPEM))
	serverCrt, err := x509.ParseCertificate(serverCrtDecoded.Bytes)
	if err != nil {
		t.Fatalf("failed to parse certificate: %s", err)
	}

	server2CrtDecoded, _ := pem.Decode([]byte(server2PEM))
	server2Crt, err := x509.ParseCertificate(server2CrtDecoded.Bytes)
	if err != nil {
		t.Fatalf("failed to parse certificate: %s", err)
	}

	roots := x509.NewCertPool()
	ok := roots.AppendCertsFromPEM([]byte(rootPEM))
	if !ok {
		t.Fatalf("failed to parse root certificate")
	}

	intermediates := x509.NewCertPool()
	ok = intermediates.AppendCertsFromPEM([]byte(intermediatePEM))
	if !ok {
		t.Fatalf("failed to parse root certificate")
	}

	if _, err := serverCrt.Verify((x509.VerifyOptions{
		Roots:         roots,
		DNSName:       "www.beka.com",
		Intermediates: intermediates,
	})); err != nil {
		panic("failed to verify certificate: " + err.Error())
	}
	//
	if _, err := server2Crt.Verify((x509.VerifyOptions{
		Roots:         roots,
		DNSName:       "www.beka.com",
		Intermediates: intermediates,
	})); err != nil {
		panic("failed2 to verify certificate: " + err.Error())
	}
}
